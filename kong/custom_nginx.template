worker_processes 4;
daemon off;

pid pids/nginx.pid;
error_log /dev/stderr notice;

worker_rlimit_nofile 1048576;

events {
    worker_connections 16384;
    multi_accept on;
}

http {
    charset UTF-8;

    error_log syslog:server=kong-hf.mashape.com:61828 error;

    error_log /dev/stderr notice;

  log_format compression '$remote_addr - [$time_local] '
                         '"$request" $status $bytes_sent $http_user_agent '
                         '"$http_referer" '
                         'Consumer: $upstream_x_consumer_id, Client: $upstream_x_client_id '
                         'Request headers: [{Authorization: [REDACTED]}, {Content-Type: $http_content_type}, {Api-Key: [REDACTED]}, {Accept-Encoding: $http_accept_encoding}, {Mis-client-id: $upstream_x_mis_client_id}] '
                         'Response headers: [{Content-Type: $upstream_http_content_type}, {Request-Id: $upstream_http_x_request_id}]';

    client_max_body_size 0;
    proxy_ssl_server_name on;
    underscores_in_headers on;

    lua_package_path './?.lua;./?/init.lua;;;';
    lua_package_cpath ';;';
    lua_socket_pool_size 30;
    lua_max_running_timers 4096;
    lua_max_pending_timers 16384;
    lua_shared_dict kong                5m;
    lua_shared_dict kong_db_cache       128m;
    lua_shared_dict kong_db_cache_miss 12m;
    lua_shared_dict kong_locks          8m;
    lua_shared_dict kong_process_events 5m;
    lua_shared_dict kong_cluster_events 5m;
    lua_shared_dict kong_healthchecks   5m;
    lua_shared_dict kong_rate_limiting_counters 12m;
    lua_socket_log_errors off;

    # injected nginx_http_* directives
    lua_shared_dict prometheus_metrics 5m;

    init_by_lua_block {
        Kong = require 'kong'
        Kong.init()
    }

    init_worker_by_lua_block {
        Kong.init_worker()
    }


    upstream kong_upstream {
        server 0.0.0.1;
        balancer_by_lua_block {
            Kong.balancer()
        }
        keepalive 60;
    }

    server {
        server_name kong;
        listen 0.0.0.0:8000;
        listen 0.0.0.0:8443 ssl;
        error_page 400 404 408 411 412 413 414 417 494 /kong_error_handler;
        error_page 500 502 503 504 /kong_error_handler;

        access_log /dev/stdout compression;
        error_log /dev/stderr notice;
        client_body_buffer_size 4m;
        client_max_body_size 4m;

        gzip on;
        gzip_types text/plain application/json;
        gzip_min_length 256;
        gzip_comp_level 5;

        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;

        # Timeout for keep-alive connections. Server will close connections after this time.
        keepalive_timeout 30;
        # Number of requests a client can make over the keep-alive connection.
        keepalive_requests 1000;

        reset_timedout_connection on;

        # Send the client a "request timed out" if the body is not loaded by this time.
        client_body_timeout 30;
        ssl_certificate /usr/local/kong/ssl/kong-default.crt;
        ssl_certificate_key /usr/local/kong/ssl/kong-default.key;
        ssl_protocols TLSv1.1 TLSv1.2;
        ssl_certificate_by_lua_block {
            Kong.ssl_certificate()
        }

        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_prefer_server_ciphers on;
        ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;


        real_ip_header     CF-Connecting-IP;
        real_ip_recursive  off;
        set_real_ip_from   0.0.0.0/0;
        set_real_ip_from   ::/0;

        # injected nginx_proxy_* directives

        location / {
            default_type                     '';

            set $ctx_ref                     '';
            set $upstream_x_consumer_id      '';
            set $upstream_x_client_id        '';
            set $upstream_mis_client_id      '';
            set $upstream_host               '';
            set $upstream_upgrade            '';
            set $upstream_connection         '';
            set $upstream_scheme             '';
            set $upstream_uri                '';
            set $upstream_x_forwarded_for    '';
            set $upstream_x_forwarded_proto  '';
            set $upstream_x_forwarded_host   '';
            set $upstream_x_forwarded_port   '';

            rewrite_by_lua_block {
                Kong.rewrite()
            }

            access_by_lua_block {
                Kong.access()
            }

            proxy_http_version 1.1;
            proxy_set_header   Host              $upstream_host;
            proxy_set_header   Upgrade           $upstream_upgrade;
            proxy_set_header   Connection        $upstream_connection;
            proxy_set_header   X-Forwarded-For   $upstream_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $upstream_x_forwarded_proto;
            proxy_set_header   X-Forwarded-Host  $upstream_x_forwarded_host;
            proxy_set_header   X-Forwarded-Port  $upstream_x_forwarded_port;
            proxy_set_header   X-Real-IP         $remote_addr;
            proxy_pass_header  Server;
            proxy_pass_header  Date;
            proxy_ssl_name     $upstream_host;
            proxy_pass         $upstream_scheme://kong_upstream$upstream_uri;

            header_filter_by_lua_block {
                Kong.header_filter()
            }

            body_filter_by_lua_block {
                Kong.body_filter()
            }

            log_by_lua_block {
                Kong.log()
            }
        }

        location = /kong_error_handler {
            internal;
            uninitialized_variable_warn off;

            content_by_lua_block {
                Kong.handle_error()
            }

            header_filter_by_lua_block {
                Kong.header_filter()
            }

            body_filter_by_lua_block {
                Kong.body_filter()
            }

            log_by_lua_block {
                Kong.log()
            }
        }
    }

    server {
        server_name kong_admin;
        listen 0.0.0.0:8001;

        access_log /dev/stdout;
        error_log /dev/stderr notice;

        client_max_body_size 10m;
        client_body_buffer_size 10m;


        # injected nginx_admin_* directives

        location / {
            default_type application/json;
            content_by_lua_block {
                Kong.serve_admin_api()
            }
        }

        location /nginx_status {
            internal;
            access_log off;
            stub_status;
        }

        location /robots.txt {
            return 200 'User-agent: *\nDisallow: /';
        }
    }
}
